#!/usr/bin/env python3

import dspy
import sys
import subprocess 
from rich import print

lm = dspy.LM('ollama_chat/deepseek-r1:32b', api_base='http://localhost:11434',api_key='')
dspy.configure(lm=lm)

python_code_generator = dspy.Predict('user_request, system_state_info, python_code_to_run_history, return_value -> python_code_to_run')
command_generator = dspy.Predict('user_request, system_state_info, command_run_history, return_value -> command')
# command_generator = dspy.Predict('user_request, system_state_info -> command')
# safety_checker = dspy.Predict('python_code_to_run_history, python_code_to_run -> bool: python_code_is_safe_to_execute, reasoning')
safety_checker = dspy.Predict('command_run_history, command -> command_is_safe_to_execute: bool, reasoning', instructions="The commands are generated by an LLM and we trust the LLM to not be malicious. The LLM is working unsupervised. If the command is not obviously dangerous and/or very hard to impossible to undo (like an rm command of files existing before the session started) then it should be marked as safe")

user_request = ''.join(sys.argv)

system_state_info = ''
return_value = ''
python_code_run_history = []
command_run_history = []

# command = command_generator(user_request=user_request, system_state_info=system_state_info).command
while True:
    # python_code_to_run = python_code_generator(user_request=user_request, system_state_info=system_state_info, python_code_run_history=python_code_run_history, return_value=return_value).python_code_to_run
    command = command_generator(user_request=user_request, system_state_info=system_state_info, command_run_history=command_run_history, return_value=return_value).command
    # print('python_code_to_run: ', python_code_to_run)
    print(f'[cyan]command[/]: {command}')
    result = safety_checker(command=command, command_run_history=command_run_history)
    command_is_safe_to_execute, reasoning = result.command_is_safe_to_execute, result.reasoning
    color = 'green' if command_is_safe_to_execute else 'red'
    print(f'[cyan]command_is_safe_to_execute:[/] [{color}] {command_is_safe_to_execute} [/]')
    print('reasoning: ', reasoning)
    if command_is_safe_to_execute:
        try:
            #return_value = exec(python_code_to_run)
            result = subprocess.run(command, shell=True, capture_output=True, text=True)
            return_value = str(result)
        except Exception as e:
            return_value = str(e)
    else:
        return_value = f"Command wasn't executed because it was determined to be unsafe. Reasoning: {reasoning}"

    print('return_value: ', return_value)
    # python_code_run_history.append({'code': python_code_to_run, 'return_value': return_value})
    command_run_history.append({'command': command, 'return_value': return_value})







