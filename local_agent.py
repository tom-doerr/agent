#!/usr/bin/env python3

import dspy
import sys
import subprocess 
from rich import print
import asyncio
import mlflow

mlflow.set_tracking_uri('http://localhost:5002')
mlflow.set_experiment('local_agent')
mlflow.dspy.autolog()

# lm = dspy.LM('ollama_chat/deepseek-r1:7b', api_base='http://localhost:11434',api_key='')
lm = dspy.LM('openrouter/deepseek/deepseek-r1-0528')
# lm = dspy.LM('openrouter/google/gemini-2.5-flash-lite-preview-06-17')
dspy.configure(lm=lm)

python_code_generator = dspy.Predict('user_request, system_state_info, python_code_to_run_history, return_value -> python_code_to_run')
command_generator = dspy.Predict('user_request, system_state_info, command_run_history, return_value -> command')
# command_generator = dspy.Predict('user_request, system_state_info -> command')
# safety_checker = dspy.Predict('python_code_to_run_history, python_code_to_run -> bool: python_code_is_safe_to_execute, reasoning')
safety_checker = dspy.Predict('command_run_history, command, user_request -> command_is_safe_to_execute: bool, reasoning', instructions="The commands are generated by an LLM and we trust the LLM to not be malicious. The LLM is working unsupervised. Commands that reveal sensitive data such as API keys, production encryption keys, diary entries, personal taskmanager tasks, personal time tracking, then it is not safe to run. If the command is not obviously dangerous, reveals sensitive data and is not very hard to impossible to undo (like an rm command of files existing before the session started) then it should be marked as safe")
is_finished_checker = dspy.Predict('user_request, system_state_info, command_run_history, return_value -> reasoning, is_finished: bool', instructions="The agent is finished if the user request has been fulfilled. The user request is fulfilled if the return value contains the answer to the user request or if the user request is a command that has been executed successfully.")

user_request = ''.join(sys.argv[1:]) if len(sys.argv) > 1 else ''

system_state_info = ''
return_value = ''
python_code_run_history = []
command_run_history = []

# command = command_generator(user_request=user_request, system_state_info=system_state_info).command
while True:
    # python_code_to_run = python_code_generator(user_request=user_request, system_state_info=system_state_info, python_code_run_history=python_code_run_history, return_value=return_value).python_code_to_run
    command = command_generator(user_request=user_request, system_state_info=system_state_info, command_run_history=command_run_history, return_value=return_value).command
    # print('python_code_to_run: ', python_code_to_run)
    print(f'[cyan]command[/]: {command}')
    result = safety_checker(command=command, command_run_history=command_run_history, user_request=user_request)
    command_is_safe_to_execute, reasoning = result.command_is_safe_to_execute, result.reasoning
    color = 'green' if command_is_safe_to_execute else 'red'
    print(f'[cyan]command_is_safe_to_execute:[/] [{color}] {command_is_safe_to_execute} [/]')
    print('reasoning: ', reasoning)
    if command_is_safe_to_execute:
        try:
            #return_value = exec(python_code_to_run)
            result = subprocess.run(command, shell=True, capture_output=True, text=True)
            return_value = str(result)
        except Exception as e:
            return_value = str(e)
    else:
        return_value = f"Command wasn't executed because it was determined to be unsafe. Reasoning: {reasoning}"

    print('return_value: ', return_value)
    # python_code_run_history.append({'code': python_code_to_run, 'return_value': return_value})
    command_run_history.append({'command': command, 'return_value': return_value})
    is_finished_result = is_finished_checker(user_request=user_request, system_state_info=system_state_info, command_run_history=command_run_history, return_value=return_value)
    print(f'[cyan]is_finished:[/] {is_finished_result.is_finished}')
    print('is_finished_result.reasoning: ', is_finished_result.reasoning)
    if is_finished_result.is_finished:
        print(f'[green]Finished![/]')
        break






#
#


















